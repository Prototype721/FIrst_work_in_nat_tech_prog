import base64
import cv2 as cv
import numpy as np

b64_jpeg = ""
raw_jpeg = base64.b64decode(b64_jpeg)

nparr = np.frombuffer(raw_jpeg, dtype=np.uint8)
image = cv.imdecode(nparr, flags=1)

blue_color = ((105, 50, 50), (135, 255, 255))

def find_contours(img, color):
    img_hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)
    img_mask = cv.inRange(img_hsv, color[0], color[1])
    contours, _ = cv.findContours(img_mask, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    return contours
   
cnt = find_contours(image, blue_color)
ans = 0
#print(cnt)
if cnt:
    for c in cnt:
        area = cv.contourArea(c)
        if abs(area) < 50:
            continue
        hull = cv.convexHull(c)
        approx = cv.approxPolyDP(hull, cv.arcLength(c, True)*0.02, True)
        if len(approx) == 4:
            print(approx)
            x1, y1 = approx[0][0]
            x2, y2 = approx[1][0]
            x3, y3 = approx[2][0]
            x4, y4 = approx[3][0]
            if abs(abs(x1-x3) - abs(x2-x4)) > 10 and abs(abs(y2-y4) - abs(y1-y3)) > 10:
                ans += 1
            
            
print(ans)
            
            
